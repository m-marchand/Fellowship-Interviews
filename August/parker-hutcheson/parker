AT THE BEGINNING OF EACH INTERVIEW

READ THIS:

“I will paste an endless series of increasingly difficult challenges 
into the editor. Your task is to figure them out as best as you can, 
and remember that we're looking for qualities beyond how many 
questions you get through, such as technical communication and 
engineering best practices.

Feel free to use any online resources that you normally would, 
e.g. Google, Stack Overflow, documentation pages. Just don't look up 
the solution directly. And when you do look something up, let me know 
what you are looking up so I can understand your thought process. 
There are no penalties for looking things up.

There are also no penalties for errors, so don't be afraid to run your 
code with an expected outcome and use any error messages to your 
advantage in refactoring to get the desired outcome.

Remember the importance of testing your code as some of the problems 
will build on each other, so you want to make sure it works before 
moving on.

Also, be sure to verbalize your thought process, as your technical 
communication is something we're looking for. As you're thinking 
through it, be sure to keep me updated on your overall strategy. 
This will help me to assess how you might work in a pair programming 
session or group environment.

Lastly, I'm not able to give any technical feedback today, but you 
will receive feedback and the result of your interview directly from 
an Admissions Team Member within one week. We'll spend the last few 
minutes of the interview on any non-technical questions you may have. 
Do you have any questions now regarding the format of the interview?”

NEXT, CONFIRM THE FOLLOWING:

Cohort start date:
Interview #
Candidate Location:

INTERVIEW BEGINS:
Send them the link to their CS Bin page: 
http://csbin.io/interview/INTERVIEWEE-NAME

The break down of questions given to interviewees should be as follows:
1 level 1 question
2 level 2 questions
2 level 3 questions
2 level 4 questions





***************************************************************

**LEVEL 2 CHALLENGES**
Problem B: countTimes / wordSearchLetterCounter
Time: 00:00

countTimes

ME -> Driver
+ reading carefully
+ responds well to me enforcing driver/navigator
- struggling to identify inputs for wordsearch
+ worked through some bugs, easy to work with


Problem C: changeCase / effectString
Time: 11:00

ME -> Navigator
changeCase
+ very clean syntax
+ knows how to use JS methods
+ ask him to write out pseudocode, writes out well formatted pseudo and code to match
+ makes smart decision to use for loop over array methods
+ knowledge of working with strings

***************************************************************

**LEVEL 3 CHALLENGES**
Problem A: checkerLogger
Time: 20:00 

+ examines examples closely
+ knows to use closure
- used term base case from recursion here --> not 100% clear here
+ uses const with obj w/ good explanation
+ very positive and excited to learn

Problem B: countChar 
Time: 30:00

+ good clarifying question about edge case
+ correctly identifies recursion and various parts

Problem C: fastCache

+ right away knows to use closure
+ great high level understanding


***************************************************************


LAST 15 MINUTES
Ask some free flow questions. Free flow questions are to get a better sense of the applicant's knowledge of JavaScript. These are some common questions to ask, but will be different based on the interviewee.

**FREEFLOW QUESTIONS**

What is hoisting?
+ how JS pulls variables to the top of the program

Can you describe closure to me?
+ calling a func within a func, stores data from outer func in closure

What is the difference between map, forEach, and a regular loop?
+ for loop just is more configurable, just going to a certain element that you decide
+ forEach is an JS method, applies a cb to each element
+/- still iterating, applies a callback but reacts differently 

***************************************************************

SCORE: 9/8/10/8/9


