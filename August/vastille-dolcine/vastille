AT THE BEGINNING OF EACH INTERVIEW

READ THIS:

“I will paste an endless series of increasingly difficult challenges 
into the editor. Your task is to figure them out as best as you can, 
and remember that we're looking for qualities beyond how many 
questions you get through, such as technical communication and 
engineering best practices.

Feel free to use any online resources that you normally would, 
e.g. Google, Stack Overflow, documentation pages. Just don't look up 
the solution directly. And when you do look something up, let me know 
what you are looking up so I can understand your thought process. 
There are no penalties for looking things up.

There are also no penalties for errors, so don't be afraid to run your 
code with an expected outcome and use any error messages to your 
advantage in refactoring to get the desired outcome.

Remember the importance of testing your code as some of the problems 
will build on each other, so you want to make sure it works before 
moving on.

Also, be sure to verbalize your thought process, as your technical 
communication is something we're looking for. As you're thinking 
through it, be sure to keep me updated on your overall strategy. 
This will help me to assess how you might work in a pair programming 
session or group environment.

Lastly, I'm not able to give any technical feedback today, but you 
will receive feedback and the result of your interview directly from 
an Admissions Team Member within one week. We'll spend the last few 
minutes of the interview on any non-technical questions you may have. 
Do you have any questions now regarding the format of the interview?”

NEXT, CONFIRM THE FOLLOWING:

Cohort start date:
Interview #
Candidate Location:

INTERVIEW BEGINS:
Send them the link to their CS Bin page: 
http://csbin.io/interview/INTERVIEWEE-NAME

The break down of questions given to interviewees should be as follows:
1 level 1 question
2 level 2 questions
2 level 3 questions
2 level 4 questions

***************************************************************
**

**LEVEL 2 CHALLENGES**
Problem B: countTimes / wordSearchLetterCounter
Time: 0:00

countTimes
+ friendly
+ reads prompt and examples very clearly for pertinent info 
+ sets up multiple test cases first! :D 
+ really concise and clear technical communication thru this approach
+ uses well formatted pseudocode (correct indentations) after speaking thru high level
+ using a for of loop citing syntactical efficiency
+ solution working on first run

wordSearchLetterCounter
+ writing multiple test cases again with anticipated outputs even covering null edge cases
+ references scope in terms of count variable in countTimes func and current func, even changing variable name to avoid confusion 
+ using a console log to test intermediary logic about array length


Problem C: changeCase / effectString
Time: 16:00

changeCase
+ consistent approach to working through solutions -> methodical 
+ looking up .toUpperCase() method on MDN
- slight block on how to check case of a letter, gave hint
+ using ternary operator :D

effectString
+ uses semicolons
+/- technical communication and pseudocode are above and beyond but it is time intensive 


***************************************************************

**LEVEL 3 CHALLENGES**
Problem A: checkerLogger
Time: 32:00

+ breaking down large prompt bit by bit communicating through pieces
+ knows how to use multiple cursors to edit code
+ uses const with compund data types
- doing outside search for a generally low level question, but using existing knowledge for a pretty good workaround


Problem B: countChar 
Time: 44:00 

+ good clarifying questions about target length and case of the input string
+ plans to use a recursive approach 


***************************************************************

LAST 15 MINUTES
Ask some free flow questions. Free flow questions are to get a better sense of the applicant's knowledge of JavaScript. These are some common questions to ask, but will be different based on the interviewee.

**FREEFLOW QUESTIONS**

What is hoisting?
+ first stage of engine reading code it hoists variables and label with keywords to the top of the file

Can you explain the main parts of a recursive function?
+ 2 things: base case to exit out of recursive loop
recursive case

What is the difference between arrow function and regular function declaration?
+ hoisted differently, arrow funcs are hoisted like variables while regular the whole definition will be hoisted
+ arrow func not bound to this 

***************************************************************

SCORE: 8/10/10/9/9


