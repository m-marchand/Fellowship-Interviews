AT THE BEGINNING OF EACH INTERVIEW

READ THIS:

“I will paste an endless series of increasingly difficult challenges 
into the editor. Your task is to figure them out as best as you can, 
and remember that we're looking for qualities beyond how many 
questions you get through, such as technical communication and 
engineering best practices.

Feel free to use any online resources that you normally would, 
e.g. Google, Stack Overflow, documentation pages. Just don't look up 
the solution directly. And when you do look something up, let me know 
what you are looking up so I can understand your thought process. 
There are no penalties for looking things up.

There are also no penalties for errors, so don't be afraid to run your 
code with an expected outcome and use any error messages to your 
advantage in refactoring to get the desired outcome.

Remember the importance of testing your code as some of the problems 
will build on each other, so you want to make sure it works before 
moving on.

Also, be sure to verbalize your thought process, as your technical 
communication is something we're looking for. As you're thinking 
through it, be sure to keep me updated on your overall strategy. 
This will help me to assess how you might work in a pair programming 
session or group environment.

Lastly, I'm not able to give any technical feedback today, but you 
will receive feedback and the result of your interview directly from 
an Admissions Team Member within one week. We'll spend the last few 
minutes of the interview on any non-technical questions you may have. 
Do you have any questions now regarding the format of the interview?”

NEXT, CONFIRM THE FOLLOWING:

Cohort start date: May 10
Interview #: 1

***************************************************************
**LEVEL 1 CHALLENGES**
Problem A: addNumbers
Time: 0:00
- uses var
- interesting syntax
+ initilizes counter to 1 first but backtracks to cover an edge case. Same with condition in for loop
+ testing


***************************************************************
**LEVEL 2 CHALLENGES**
Problem A: usePotions
Time: 2:00
+ reads prompt 
+ moves fast through these easy ones
+ looking through examples to understand prompt
+ using pseudocode to create an approach
+ looking a method up with a clear goal and tells me about it
- uses let with an array
+ talks about concerns about mutating a string
+ great technical communication, high level but descriptive
- has prior coding experience but is careful not to make assumptions about JS
+ talks me through concerns about data types 
+ I can tell his thinking with if blocks before he even writes code
+ debugging logic is sound
+ never gives up!
+ great analytical step by step logic

Problem C: isPalindrome
Time: 26:00
- doesn't read prompt out loud
+ talks through a high level approach
+ good approach
+ gets it on first try

***************************************************************

**LEVEL 3 CHALLENGES**
Problem A: add
Time: 30:30
+ clear parameter naming
+ understands closure
+ tests

Problem B: getLength
Time: 32:00
+ asks clarifying question about whether recursion is allowed
+ knows default parameters
+ handles edge case of empty string
- mentioned the term base case but doesn't have one
- trying to come up with an approach not using methods 
+ pauses to talk through code 
- technical communication isn't super strong through recursion 
- Solved it with some pushes from me

***************************************************************
**

**FREEFLOW QUESTIONS**

What is a callback? What is a higher-order function?
+ HOF takes another function as an arg

Can you describe closure to me?
+ func that returns another func
+ maintains things in scope

var vs let vs const.
+ let is scoped to the function
+ var is block scoped
+ const can't be changed 

***************************************************************

Score - 9/8/10/9/10
