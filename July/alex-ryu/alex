AT THE BEGINNING OF EACH INTERVIEW

READ THIS:

“I will paste an endless series of increasingly difficult challenges 
into the editor. Your task is to figure them out as best as you can, 
and remember that we're looking for qualities beyond how many 
questions you get through, such as technical communication and 
engineering best practices.

Feel free to use any online resources that you normally would, 
e.g. Google, Stack Overflow, documentation pages. Just don't look up 
the solution directly. And when you do look something up, let me know 
what you are looking up so I can understand your thought process. 
There are no penalties for looking things up.

There are also no penalties for errors, so don't be afraid to run your 
code with an expected outcome and use any error messages to your 
advantage in refactoring to get the desired outcome.

Remember the importance of testing your code as some of the problems 
will build on each other, so you want to make sure it works before 
moving on.

Also, be sure to verbalize your thought process, as your technical 
communication is something we're looking for. As you're thinking 
through it, be sure to keep me updated on your overall strategy. 
This will help me to assess how you might work in a pair programming 
session or group environment.

Lastly, I'm not able to give any technical feedback today, but you 
will receive feedback and the result of your interview directly from 
an Admissions Team Member within one week. We'll spend the last few 
minutes of the interview on any non-technical questions you may have. 
Do you have any questions now regarding the format of the interview?”

NEXT, CONFIRM THE FOLLOWING:

Cohort start date:
Interview #
Candidate Location:

INTERVIEW BEGINS:
Send them the link to their CS Bin page: 
http://csbin.io/interview/INTERVIEWEE-NAME

The break down of questions given to interviewees should be as follows:
1 level 1 question
2 level 2 questions
2 level 3 questions
2 level 4 questions

***************************************************************

**LEVEL 2 CHALLENGES**
Problem A: containsJ / screen
Time: 0:00

- Didn't read prompt
+ uses const for array 
+ console.logs, caught an error

+ reads this prompt carefully
+ talks me through high level approach and even edge related to case
+ uses word parameter correctly
- psueodcode is too general 
+ using google to check typeof syntax
- not sure if he can use a for loop on strings
- been silent for a minute or so
+ writes a good console log test to make sure indexes work with string
- looking up a lot of thing (toUpperCase)
+ short circuits for loop! 
- bug with if/else statement
+ testing
+ great coverage of edge cases
+ walking through each line, gave him a nudge with true/false and he communicated me through it perfectly
+ stays calm and keeps working

screen//
+ his logic is good, stepping through, if this, then I need to do that
- no pseudocode at this point
- declares a variable without a keyword (global)
+ checked in with me if he was being clear enough


Problem C: countTimes / wordSearchLetterCounter
Time: 29:00 

+ uses forEach
- syntax error with one liner is giving him an error
- switches to a for loop
+ extra bracket left over elsewhere in the code was causing his error
- should be more familiar with when to use a loop
- not the most precise technical communication but is good at communicating the logic


**FREEFLOW QUESTIONS**

What is the difference between a parameter and an argument?
+ parameter is a palceholder

Can you describe closure to me?
- No

var vs let vs const.
+ const stays the same

What are some examples of primitive and composite data types?
+ primitive string, object composite


***************************************************************

CONCLUSION
 7/8/9/8/8


