AT THE BEGINNING OF EACH INTERVIEW

READ THIS:

“I will paste an endless series of increasingly difficult challenges 
into the editor. Your task is to figure them out as best as you can, 
and remember that we're looking for qualities beyond how many 
questions you get through, such as technical communication and 
engineering best practices.

Feel free to use any online resources that you normally would, 
e.g. Google, Stack Overflow, documentation pages. Just don't look up 
the solution directly. And when you do look something up, let me know 
what you are looking up so I can understand your thought process. 
There are no penalties for looking things up.

There are also no penalties for errors, so don't be afraid to run your 
code with an expected outcome and use any error messages to your 
advantage in refactoring to get the desired outcome.

Remember the importance of testing your code as some of the problems 
will build on each other, so you want to make sure it works before 
moving on.

Also, be sure to verbalize your thought process, as your technical 
communication is something we're looking for. As you're thinking 
through it, be sure to keep me updated on your overall strategy. 
This will help me to assess how you might work in a pair programming 
session or group environment.

Lastly, I'm not able to give any technical feedback today, but you 
will receive feedback and the result of your interview directly from 
an Admissions Team Member within one week. We'll spend the last few 
minutes of the interview on any non-technical questions you may have. 
Do you have any questions now regarding the format of the interview?”

NEXT, CONFIRM THE FOLLOWING:

Cohort start date:
Interview #
Candidate Location:

INTERVIEW BEGINS:
Send them the link to their CS Bin page: 
http://csbin.io/interview/INTERVIEWEE-NAME

The break down of questions given to interviewees should be as follows:
1 level 1 question
2 level 2 questions
2 level 3 questions
2 level 4 questions

***************************************************************
**LEVEL 1 CHALLENGES**
Problem A: addNumbers
Time: 0:00

+ thinking through prompt 
- diving straight into code, no discussion of approach 
- few small syntax bugs
+ solid logic and pretty good technical communication
+ used console log to debug his for loop, pretty good debugging skills


***************************************************************
**LEVEL 2 CHALLENGES**
Problem A: passAllTests
Time: 8:00

+ uses function expression (ES6)
+/- really casual communication style (yellow flag)
- reminded him about testing
- confused about implicit return 
- syntax error, no return statement
- using outside resource to check how to determine a negative number -> suggests need for work on math/analytical skills
- using else statements, not the most efficient
+ debugged 

passAllTests
+ reads prompt clearly here for inputs and outputs
+ correctly identifies higher order functions 
- plans to use a more advanced method like map, apply, or filter
+ eventually lands on an implementation using for...of loop
+ plans to short circuit for loop! 
+/- did a little pair porgramming here to talk through his solution 


Problem C: isPalindrome
Time: 42:00

+ tells me strong high level approach
- but not using detailed technical communication 
- declares unnecessary variables
+ uses docs to look up split method details
+ tests code along the way with a console log

***************************************************************

**FREEFLOW QUESTIONS**

What is a callback? What is a higher-order function?
+ HOF takes a callback as a parameter

Can you describe closure to me?
+ return a function from another and scoops out inside of the outer function and you can access these variables from the inner function 

What is the difference between arrow function and regular function declaration?
+ arrow functions can't be object methods

***************************************************************

SCORE: 7/6/8/7/8
