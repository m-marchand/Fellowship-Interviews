AT THE BEGINNING OF EACH INTERVIEW

READ THIS:

“I will paste an endless series of increasingly difficult challenges 
into the editor. Your task is to figure them out as best as you can, 
and remember that we're looking for qualities beyond how many 
questions you get through, such as technical communication and 
engineering best practices.

Feel free to use any online resources that you normally would, 
e.g. Google, Stack Overflow, documentation pages. Just don't look up 
the solution directly. And when you do look something up, let me know 
what you are looking up so I can understand your thought process. 
There are no penalties for looking things up.

There are also no penalties for errors, so don't be afraid to run your 
code with an expected outcome and use any error messages to your 
advantage in refactoring to get the desired outcome.

Remember the importance of testing your code as some of the problems 
will build on each other, so you want to make sure it works before 
moving on.

Also, be sure to verbalize your thought process, as your technical 
communication is something we're looking for. As you're thinking 
through it, be sure to keep me updated on your overall strategy. 
This will help me to assess how you might work in a pair programming 
session or group environment.

Lastly, I'm not able to give any technical feedback today, but you 
will receive feedback and the result of your interview directly from 
an Admissions Team Member within one week. We'll spend the last few 
minutes of the interview on any non-technical questions you may have. 
Do you have any questions now regarding the format of the interview?”

NEXT, CONFIRM THE FOLLOWING:

Cohort start date: April 19th
Interview # 1
Candidate Location: San Diego 

INTERVIEW BEGINS:
Send them the link to their CS Bin page: 
http://csbin.io/interview/INTERVIEWEE-NAME

The break down of questions given to interviewees should be as follows:
1 level 1 question
2 level 2 questions
2 level 3 questions
2 level 4 questions

***************************************************************
**LEVEL 1 CHALLENGES**
Problem B: minAndMax
Time: 0:00

// Declare a variable 'randomNums' and set it equal to an array that contain the numbers 1, 14, 7, 21, and -6.

+ I'm gonna read the question out loud
+/- uses let
+ very descriptive technical communication
+ console logs array

/*
Create a function 'minAndMax' that takes an array of numbers and returns both the smallest and largest number in an array, in that order.
NOTE: do not use the native Math.min or Math.max methods. For example minAndMax([7, 68, 2, 19]) should return the array  [2, 68]
*/

+ talks through approach before even touching code
+ the approach is solid, iterate and reassign
+ great detailed technical communication
- no pseudocode yet
+ tests with her own test case

//  Check that your 'minAndMax' function is working correctly by passing your variable 'randomNums' to the 'minAndMax' function

+ works


***************************************************************
**LEVEL 2 CHALLENGES**
Problem A: passAllTests
Time: 8:30 

/*
Create a function "between50And500" that takes a number as an argument.
"between50And500" should return a true if the number passed to it is between 50 and 500 exclusive.
For example, if the input is 45 then your function should return false and if the input is 472 it should return true.
*/

+ reiterates prompt and asks clarifying question about "exclusive"
- thinking about using a for loop
+ but then she backtracks but stuck thinking of another approach: planning on using an if statement 
+ makes sure to account for exclusive requirement 

/*
Create a function "divBy100" that takes a number as an argument.
"divBy100" should return a true if the number passed to it is divisible by 100.
For example, if the input is 120 then your function should return false and if the input is 600 it should return true.
*/

+ planning to use modulo
+ talks through approach, still no pseudocode but totally fine
+ tests for an expected true and false

/*
Create a function "negativeOrEven" that takes a number as an argument.
"negativeOrEven" should return a true if the number passed to it is a negative number OR it is an even number.
For example, if the input is 7 then your function should return false and if the input is -3 it should return true.
*/

+ prompt throwing her off, rereading carefully
+ reiterates logic conversationally to me

/*
Create a function "passAllTests" that takes an array of functions and another value as arguments.
Each function in your array will return a boolean value. "passAllTests" should pass your value argument to each function.
If all functions in your array return true then "passAllTests" will return true. Otherwise "passAllTests" should return false
*/

+ asks clarifying question!
+ thinking she might need pseudocode becuase it's getting harder to explain
+ great descriptive psuedocode in common language 
+ if it's false you can just return false, dont need a boolean variable - using scope to return boolean
+ uses for loop

/*
Use your "passAllTests" function to test if the number 300 is greater than the number 50 and less than the number 500,
divisible by 100, and a negative number OR even. Then test the number 250.
*/

+ descriptive variable names
- invoking function inside of array
+ thinking about expected output for different test cases
- hits error but immediately finds error
+ awesome technical communication
+ finds error and corrects it

Problem C: isPalindrome
Time: 33:00 

/*
Define a function "isPalindrome" that takes a string, and returns a boolean value indicating whether the string is a palindrome
(a palindrome is any string that has the same value when reversed - for example, "LEVEL" or "RACECAR")
*/

+ plans to compare input to reversed version
+ thinks about edge cases regarding letter case
+ using a helper function to reverse string
+ mentions strings being immutable
- tests only cover expected true values

***************************************************************

**LEVEL 3 CHALLENGES**
Problem A: add
Time: 34:00

/*
Create a function "add" that takes an argument (a number) and returns a function.
The returned function should also take one argument (a number) and return the sum of its argument and the argument that was originally past to "add"
Example:
const addBy10 = add(10)
addBy10(20) -> 30
*/

+ "I feel like this is a closure problem looking and the output" --> "returns a function"
+ makes sure to understand that it's closure
+ perfect implementation but...
- stuck on how to invoke but thinking through it
+ using the prompt as a hint 
- pretty quiet during this block
+ got it

Problem B: getLength
Time:

// Write a function "getLength" that returns the length of a string. Accomplish this without using any loops, native JS methods, or the length property.


***************************************************************
**LEVEL 4 CHALLENGES**
Problem A: transpose
Time: 

/*
Write a function called 'transpose' that accepts a two dimensional array and returns a transposed version of that array.
Example:
const twoDimArray = [ ['fred', 'barney'], [30, 40], [true, false] ]
console.log(transpose(twoDimArray)); // -> [['fred', 30, true], ['barney', 40, false]]
*/



Problem B: rotateGrid
Time:

/*
Write a function 'rotateGrid' that is given an NxN grid of elements represented by a 2D array, and outputs a grid equivalent to the same grid rotated 90 degrees clockwise.
Example:
const sampleGrid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]
console.log(rotateGrid(sampleGrid)); // -> [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ]
*/



***************************************************************

LAST 15 MINUTES
Ask some free flow questions. Free flow questions are to get a better sense of the applicant's knowledge of JavaScript. These are some common questions to ask, but will be different based on the interviewee.

**FREEFLOW QUESTIONS**

What is hoisting?
+ closures and garbage collecting 

Can you describe closure to me?
+ collects the functions lexical scope!
+ function is aware of other 

What is the difference between a console log and a return statement?
+ return is the end of a function that gives you a value
+ gives you a value for suture use
+ console log just accesses the value 
- not super clear here 

SCORE: 8/9/10/9/8

***************************************************************
CONCLUSION

General Notes: Laura is awesome!!! She would be a great resident and shows great technical and non-technical potential. 

What They Did Well: Very clear communication and analytical approach.

What They Didn't Do Well: Doesn't seem 100% solid on more advanced JS concepts.
