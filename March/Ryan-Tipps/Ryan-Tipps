AT THE BEGINNING OF EACH INTERVIEW

READ THIS:

“I will paste an endless series of increasingly difficult challenges 
into the editor. Your task is to figure them out as best as you can, 
and remember that we're looking for qualities beyond how many 
questions you get through, such as technical communication and 
engineering best practices.

Feel free to use any online resources that you normally would, 
e.g. Google, Stack Overflow, documentation pages. Just don't look up 
the solution directly. And when you do look something up, let me know 
what you are looking up so I can understand your thought process. 
There are no penalties for looking things up.

There are also no penalties for errors, so don't be afraid to run your 
code with an expected outcome and use any error messages to your 
advantage in refactoring to get the desired outcome.

Remember the importance of testing your code as some of the problems 
will build on each other, so you want to make sure it works before 
moving on.

Also, be sure to verbalize your thought process, as your technical 
communication is something we're looking for. As you're thinking 
through it, be sure to keep me updated on your overall strategy. 
This will help me to assess how you might work in a pair programming 
session or group environment.

Lastly, I'm not able to give any technical feedback today, but you 
will receive feedback and the result of your interview directly from 
an Admissions Team Member within one week. We'll spend the last few 
minutes of the interview on any non-technical questions you may have. 
Do you have any questions now regarding the format of the interview?”

NEXT, CONFIRM THE FOLLOWING:

Cohort start date: April 9th
Interview #: 2
Candidate Location: Austin

INTERVIEW BEGINS:
Send them the link to their CS Bin page: 
http://csbin.io/interview/INTERVIEWEE-NAME

The break down of questions given to interviewees should be as follows:
1 level 1 question
2 level 2 questions
2 level 3 questions
2 level 4 questions

***************************************************************
**LEVEL 1 CHALLENGES**
Problem B: societyName 
Time: 0:00

// Declare a variable 'names' and set it to an array with the values 'Chris', 'Samantha', 'Richard', and  'Kyle' in it.

+ nice clarification about pseudocode 
- uses let with the array
+ tests out array with a console log

/*
A group of friends have decided to start a secret society. The name will be the first letter of each of their names, sorted in alphabetical order.
Create a function 'societyName' that takes in an array of names and returns the name of the secret society.
For example, if our input is ['Adam', 'Sarah', 'Malcolm'] then 'societyName' should return the string 'AMS'
*/

+ talks through high level, good reiteration of prompt details
+ talks me through what he's gonna do 
+ descriptive parameter names
+ makes test cases before approaching solution
+ uses pseudocode step by step 
+ gonna google to make sure he has a string sorting method 
+ tells me what resources he's using
+/- goes back on earlier approach to sort an array
+ great pseudocode in plain english
- looking up syntax of forEach, now unsure about approach 
- got pretty quiet for like 30 seconds, keeps thinking he has to mutuate the strings
- put first index as 1 not 0 but corrected it
+ chains methods, actually is getting super close!
+ understands what he needs to do just doesn't have strongest javascript skills, finds what he's looking for pretty fast
+ learns how join works!! Got it!

// Check that your 'societyName' function is working correctly by passing the value of 'names' to the function 'societyName'



***************************************************************

**LEVEL 2 CHALLENGES**
Problem B: countTimes / wordSearchLetterCounter
Time: 22:00

/*
Create a function "countTimes" that takes in two arguments (an array and a search value).
"countTimes" should return the number of times the search value is present in the array.
Example:
countTimes([1, 8, 9, 9, 10], 9) -> 2
*/

+ makes test cases first!
- asks me if he can use a loop
+/- seems pretty nervous but pretty strong on this one 

***************************************************************

**LEVEL 3 CHALLENGES**
Problem A: checkerLogger
Time: 30:00

/*
Create a function "checkerLogger" that takes one argument (a function that returns a boolean value) The returned function should have the following behavior:
If the function is invoked with an argument, the checker callback function is invoked and its boolean result is returned.
If the function is invoked without any arguments, instead return a count of the number of times the callback function has been invoked and evaluated true or false.
Example:
const isOdd = num => num % 2 === 1
const oddCounter = checkerLogger(isOdd);
oddCounter(); ->  { true: 0, false: 0 }
oddCounter(3); -> true
oddCounter(2); ->  false
oddCounter(); -> { true: 1, false: 1 }
*/

+ catches closure right away 
+ "closed over variable environment"
+ good technical communication through closure example
+ explains high level approach, sounds good
+ definitely understands closure but has a hard time with the implementation
+ keeps nesting neat even with pseudocode 
+ uses const with object
- googles syntax for defining object and how to update a value in an object 
+ thinking about optimizing 


***************************************************************

LAST 15 MINUTES
Ask some free flow questions. Free flow questions are to get a better sense of the applicant's knowledge of JavaScript. These are some common questions to ask, but will be different based on the interviewee.

**FREEFLOW QUESTIONS**

Can you explain the difference between backet notation and dot notation?
+ both used to do the same thing big picture
+ dot notation has some limitations in syntax and characters
+ cant use variables with dot

Can you explain the main parts of a recursive function?
+ base case, the end of recursing
+ recursive case with new parameters

What is the difference between map, forEach, and a regular loop?
+ map and forEach are array methods 
+ for loop in manually checking length, more flexible
+ you can break a for loop
+ you have to use a callback with map and forEach


***************************************************************

CONCLUSION - 8/9/10/9/8

General Notes: Ryan did a great job but lack of confidence in Javascript fundamentals tripped him up a bit even though he had great approaches and implemented strong solutions

What They Did Well: Great intuitional approach to high level logic and debugging, great technical and non-technical communication

What They Didn't Do Well: Seemed nervous and got tripped up on things that he then coded out fine. this made him move somewhat slowly and he didnt get to the recursion problem.


