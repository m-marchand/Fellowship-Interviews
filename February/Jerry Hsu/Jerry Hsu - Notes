AT THE BEGINNING OF EACH INTERVIEW

READ THIS:

“I will paste an endless series of increasingly difficult challenges 
into the editor. Your task is to figure them out as best as you can, 
and remember that we're looking for qualities beyond how many 
questions you get through, such as technical communication and 
engineering best practices.

Feel free to use any online resources that you normally would, 
e.g. Google, Stack Overflow, documentation pages. Just don't look up 
the solution directly. And when you do look something up, let me know 
what you are looking up so I can understand your thought process. 
There are no penalties for looking things up.

There are also no penalties for errors, so don't be afraid to run your 
code with an expected outcome and use any error messages to your 
advantage in refactoring to get the desired outcome.

Remember the importance of testing your code as some of the problems 
will build on each other, so you want to make sure it works before 
moving on.

Also, be sure to verbalize your thought process, as your technical 
communication is something we're looking for. As you're thinking 
through it, be sure to keep me updated on your overall strategy. 
This will help me to assess how you might work in a pair programming 
session or group environment.

Lastly, I'm not able to give any technical feedback today, but you 
will receive feedback and the result of your interview directly from 
an Admissions Team Member within one week. We'll spend the last few 
minutes of the interview on any non-technical questions you may have. 
Do you have any questions now regarding the format of the interview?”

NEXT, CONFIRM THE FOLLOWING:

Cohort start date: March 6
Interview # 1
Candidate Location: New York 

INTERVIEW BEGINS:
Send them the link to their CS Bin page: 
http://csbin.io/interview/INTERVIEWEE-NAME

ASK THEM TO SHARE SCREEN

The break down of questions given to interviewees should be as follows:
1 level 1 question
2 level 2 questions
2 level 3 questions
2 level 4 questions

***************************************************************
**LEVEL 1 CHALLENGES**
Problem B: minAndMax
Time: 0

// Declare a variable 'randomNums' and set it equal to an array that contain the numbers 1, 14, 7, 21, and -6.

+ reads prompt
- tells me about ruby experience

/*
Create a function 'minAndMax' that takes an array of numbers and returns both the smallest and largest number in an array, in that order.
NOTE: do not use the native Math.min or Math.max methods. For example minAndMax([7, 68, 2, 19]) should return the array  [2, 68]
*/

//  Check that your 'minAndMax' function is working correctly by passing your variable 'randomNums' to the 'minAndMax' function

+ talks through approach, really good technical communication 
- uses 'var'
+ good use of forEach
+ getting it right away
- no pesudo code
- getting syntax error from callback declaration of forEach
+ ^^ got it
- trying to console log the return statment to get invocation to show up
- just console logged in the function not the invocation 



***************************************************************
**LEVEL 2 CHALLENGES**
Problem A: passAllTests
Time: 9:30

/*
Create a function "between50And500" that takes a number as an argument.
"between50And500" should return a true if the number passed to it is between 50 and 500 exclusive.
For example, if the input is 45 then your function should return false and if the input is 472 it should return true.
*/

+ clarifying question "exclusive"
- trying to test this out without a return 
+ adds the return 

/*
Create a function "divBy100" that takes a number as an argument.
"divBy100" should return a true if the number passed to it is divisible by 100.
For example, if the input is 120 then your function should return false and if the input is 600 it should return true.
*/

+ reads
+ "simple logic statements"


/*
Create a function "negativeOrEven" that takes a number as an argument.
"negativeOrEven" should return a true if the number passed to it is a negative number OR it is an even number.
For example, if the input is 7 then your function should return false and if the input is -3 it should return true.
*/

- not testing functions
- not sure if needs an if statement 
+ good logic off the bat

/*
Create a function "passAllTests" that takes an array of functions and another value as arguments.
Each function in your array will return a boolean value. "passAllTests" should pass your value argument to each function.
If all functions in your array return true then "passAllTests" will return true. Otherwise "passAllTests" should return false
*/

- no pseudocode : (
- never heard about passing functions into a function
+ googling array of functions
- might need to use function expression
+/- using forEach for array of functions, how will he short circuit
- adding variable? 
- trying to return from forEach



/*
Use your "passAllTests" function to test if the number 300 is greater than the number 50 and less than the number 500,
divisible by the 100, and a negative number OR even. Then test the number 250.
*/

+ creates array of already created functions
+ console logs invocation
- gets true for 300 and 250
+ tests out divBy100, it's working
+ communicates clearly when looking up docs
+ finds forEach return error once reading docs
+ keeps going when hitting the block
+ throwing in a console log to check code block
+ gave him a nudge because a stray console log was throwing him off

Problem C: isPalindrome
Time: 32

/*
Define a function "isPalindrome" that takes a string, and returns a boolean value indicating whether the string is a palindrome
(a palindrome is any string that has the same value when reversed - for example, "LEVEL" or "RACECAR")
*/

+ defines inputs
+ talks through approach
+ wonders if he should be mutating string 
- but then mutates it
- not too familiar with JS methods 
- doesn't wrap conditionals in if or return 
+ tests function out 
+ uses errors pretty well to refactor 
+ uses console logs to debug 
+ explains thought process clearly 
+ does more research on unshift
+ stays positive during blocks 
+ More console logs!! : )
+ got split working correctly 
- not grasping the return concept very well
+ got it!




***************************************************************

**LEVEL 3 CHALLENGES**
Problem A: add
Time: 47

/*
Create a function "add" that takes an argument (a number) and returns a function.
The returned function should also take one argument (a number) and return the sum of its argument and the argument that was originally past to "add"
Example:
const addBy10 = add(10)
addBy10(20) -> 30
*/

- "returns a function?!"
+ still talks through it
- function expressions? 
+ seems to be excited about new concepts
+ creates an inner function and defines correctly 
- doesn't return inner function 



Problem B: getLength
Time:

// Write a function "getLength" that returns the length of a string. Accomplish this without using any loops, native JS methods, or the length property.


***************************************************************
**LEVEL 4 CHALLENGES**
Problem A: transpose
Time: 

/*
Write a function called 'transpose' that accepts a two dimensional array and returns a transposed version of that array.
Example:
const twoDimArray = [ ['fred', 'barney'], [30, 40], [true, false] ]
console.log(transpose(twoDimArray)); // -> [['fred', 30, true], ['barney', 40, false]]
*/



Problem B: rotateGrid
Time:

/*
Write a function 'rotateGrid' that is given an NxN grid of elements represented by a 2D array, and outputs a grid equivalent to the same grid rotated 90 degrees clockwise.
Example:
const sampleGrid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]
console.log(rotateGrid(sampleGrid)); // -> [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ]
*/



***************************************************************

LAST 15 MINUTES
Ask some free flow questions. Free flow questions are to get a better sense of the applicant's knowledge of JavaScript. These are some common questions to ask, but will be different based on the interviewee.

**FREEFLOW QUESTIONS**

var vs let vs const.

+ cant change const
- dont remember subtleties between let and var

What is a callback? What is a higher-order function?

+/- use it again down the road 
- doesnt realize the two concepts are related
- controls other functions 
- run in parallel 

Can you describe closure to me?

- not familiar 
+/- scoping of variable in sub functions 

***************************************************************
CONCLUSION

Score: 6/7/9/9/9

What They Did Well: Communicated through blocks and thought process really well. Seems able to use non JS programming experience to make informed logic descisions. Good intuition.

What They Didn't Do Well: Doesn't seem to have a deep grasp of JS methods or concepts. Was able to get to level 3 despite. 
